{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useAnimatedValue;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useAnimatedValue(initialValue) {\n  var lazyRef = React.useRef();\n\n  if (lazyRef.current === undefined) {\n    lazyRef.current = new _reactNative.Animated.Value(initialValue);\n  }\n\n  return lazyRef.current;\n}","map":{"version":3,"sources":["useAnimatedValue.tsx"],"names":["lazyRef","React","Animated"],"mappings":";;;;;AAAA;;AACA;;;;;;AAEe,SAAA,gBAAA,CAAA,YAAA,EAAgD;AAC7D,MAAMA,OAAO,GAAGC,KAAK,CAArB,MAAgBA,EAAhB;;AAEA,MAAID,OAAO,CAAPA,OAAAA,KAAJ,SAAA,EAAmC;AACjCA,IAAAA,OAAO,CAAPA,OAAAA,GAAkB,IAAIE,sBAAJ,KAAA,CAAlBF,YAAkB,CAAlBA;AACD;;AAED,SAAOA,OAAO,CAAd,OAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { Animated } from 'react-native';\n\nexport default function useAnimatedValue(initialValue: number) {\n  const lazyRef = React.useRef<Animated.Value>();\n\n  if (lazyRef.current === undefined) {\n    lazyRef.current = new Animated.Value(initialValue);\n  }\n\n  return lazyRef.current as Animated.Value;\n}\n"]},"metadata":{},"sourceType":"script"}