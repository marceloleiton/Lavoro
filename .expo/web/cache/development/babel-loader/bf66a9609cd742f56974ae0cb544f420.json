{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = MaterialTopTabView;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeTabView = require(\"react-native-tab-view\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _MaterialTopTabBar = _interopRequireDefault(require(\"./MaterialTopTabBar\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction MaterialTopTabView(_ref) {\n  var pager = _ref.pager,\n      lazyPlaceholder = _ref.lazyPlaceholder,\n      _ref$tabBar = _ref.tabBar,\n      tabBar = _ref$tabBar === void 0 ? function (props) {\n    return React.createElement(_MaterialTopTabBar.default, props);\n  } : _ref$tabBar,\n      tabBarOptions = _ref.tabBarOptions,\n      state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"pager\", \"lazyPlaceholder\", \"tabBar\", \"tabBarOptions\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"]);\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar((0, _extends3.default)({}, tabBarOptions, props, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  return React.createElement(_native.NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(_reactNativeTabView.TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch((0, _extends3.default)({}, _native.TabActions.jumpTo(state.routes[index].name), {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderPager: pager,\n    renderLazyPlaceholder: lazyPlaceholder,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  })));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["tabBar","props","rest","colors","renderTabBar","state","navigation","descriptors","index","TabActions","target","key","route","type","backgroundColor","background"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;AAee,SAAA,kBAAA,OAUL;AAAA,MAViC,KAUjC,QAViC,KAUjC;AAAA,MAViC,eAUjC,QAViC,eAUjC;AAAA,yBAPRA,MAOQ;AAAA,MAPRA,MAOQ,4BAPEC,UAAAA,KAAD;AAAA,WAAmC,KAAA,CAAA,aAAA,CAAA,0BAAA,EAHH,KAGG,CAAnC;AAAA,GAOD;AAAA,MAViC,aAUjC,QAViC,aAUjC;AAAA,MAViC,KAUjC,QAViC,KAUjC;AAAA,MAViC,UAUjC,QAViC,UAUjC;AAAA,MAViC,WAUjC,QAViC,WAUjC;AAAA,MAViC,mBAUjC,QAViC,mBAUjC;AAAA,MADLC,IACK;;AAAA,kBACR,uBADQ;AAAA,MACAC,MADA,aACAA,MADA;;AAGR,MAAMC,YAAY,GAAIH,SAAhBG,YAAgBH,CAAAA,KAAD,EAA+B;AAClD,WAAOD,MAAM,4BAAC,aAAD,EAAC,KAAD;AAGXK,MAAAA,KAAK,EAHO,KAAD;AAIXC,MAAAA,UAAU,EAJE,UAAD;AAKXC,MAAAA,WAAW,EAAEA;AALF,OAAb;AADF,GAAA;;AAUA,SACE,KAAA,CAAA,aAAA,CAAA,iCAAA,QAAA,EAAA;AAAmC,IAAA,KAAK,EAAED;AAA1C,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,aAAa,EAAGE,uBAAAA,KAAD;AAAA,aACb,UAAU,CAAV,QAAA,4BACKC,mBAAAA,MAAAA,CAAkBJ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EADH,IACfI,CADL;AAEEC,QAAAA,MAAM,EAAEL,KAAK,CAACM;AAFhB,SADa;AAAA,KAFjB;AAQE,IAAA,WAAW,EAAE;AAAA,UAAGC,KAAH,SAAGA,KAAH;AAAA,aAAeL,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAR9B,MAQ8BA,EAAf;AAAA,KARf;AASE,IAAA,eAAe,EATjB,KAAA;AAUE,IAAA,YAAY,EAVd,YAAA;AAWE,IAAA,WAAW,EAXb,KAAA;AAYE,IAAA,qBAAqB,EAZvB,eAAA;AAaE,IAAA,YAAY,EAAE;AAAA,aAAM,UAAU,CAAV,IAAA,CAAgB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAN;AAAA,KAbhB;AAcE,IAAA,UAAU,EAAE;AAAA,aAAM,UAAU,CAAV,IAAA,CAAgB;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAN;AAAA,KAdd;AAeE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEX,MAAM,CAACY;AAA1B,KADmB,EAAA,mBAAA;AAfvB,GAAA,CAAA,CADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}